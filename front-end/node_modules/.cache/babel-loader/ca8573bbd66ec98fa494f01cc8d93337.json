{"ast":null,"code":"import axios from \"axios\";\nimport React from \"react\";\nimport App from '../../App';\nimport app from \"../../App\";\nconst JWT_EXPIRY_TIME = 24 * 3600 * 1000; // 만료 시간 (24시간 밀리 초로 표현)\n\nconst userData = {\n  email: \"\",\n  password: \"\"\n};\nexport const onLogin = (email, password) => {\n  userData.email = email;\n  userData.password = password;\n  axios.post(\"http://localhost:8080/user/login\", {\n    email: email,\n    password: password\n  }).then(res => {\n    console.log(\"로그인 성공\");\n    onLoginSuccess(res);\n  }).catch(error => {\n    console.log(\"로그인 실패\");\n  });\n};\nexport const onSilentRefresh = () => {\n  console.log(\"refresh\");\n  axios.post(\"http://localhost:8080/user/refresh\", {\n    email: userData.email,\n    password: userData.password\n  }).then(res => {\n    onLoginSuccess(res);\n  }).catch(error => {\n    console.log(\"refresh실패\");\n  });\n};\n\nconst onLoginSuccess = response => {\n  console.log(response.data.accessToken);\n  const accessToken = response.data.accessToken; // accessToken 설정\n  // axios.interceptors 를 이용해도 됨\n\n  console.log(accessToken);\n  axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.accessToken}`; // accessToken 만료하기 1분 전에 로그인 연장\n\n  setTimeout(onSilentRefresh, JWT_EXPIRY_TIME - 60000);\n  sessionStorage.setItem(\"isLogin\", \"login\");\n};\n\nexport const logout = () => {\n  axios.post(\"http://localhost:8080/user/logout\").then(res => {\n    userData.email = \"\";\n    userData.password = \"\";\n    sessionStorage.removeItem(\"isLogin\");\n    axios.defaults.headers.common['Authorization'] = null;\n    console.log(\"로그아웃 성공\");\n  }).catch(error => {\n    console.log(\"로그아웃 실패\");\n  });\n};","map":{"version":3,"sources":["/Users/kimheejun/WebstormProjects/boot_react/src/component/auth/LoginLogic.js"],"names":["axios","React","App","app","JWT_EXPIRY_TIME","userData","email","password","onLogin","post","then","res","console","log","onLoginSuccess","catch","error","onSilentRefresh","response","data","accessToken","defaults","headers","common","setTimeout","sessionStorage","setItem","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,MAAMC,eAAe,GAAG,KAAK,IAAL,GAAY,IAApC,C,CAA0C;;AAE1C,MAAMC,QAAQ,GAAC;AACXC,EAAAA,KAAK,EAAC,EADK;AAEXC,EAAAA,QAAQ,EAAC;AAFE,CAAf;AAKA,OAAO,MAAMC,OAAO,GAAG,CAACF,KAAD,EAAQC,QAAR,KAAqB;AACxCF,EAAAA,QAAQ,CAACC,KAAT,GAAeA,KAAf;AACAD,EAAAA,QAAQ,CAACE,QAAT,GAAkBA,QAAlB;AAEAP,EAAAA,KAAK,CAACS,IAAN,CAAW,kCAAX,EAA8C;AAC1CH,IAAAA,KAAK,EAACA,KADoC;AAE1CC,IAAAA,QAAQ,EAACA;AAFiC,GAA9C,EAIKG,IAJL,CAIUC,GAAG,IAAG;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAC,IAAAA,cAAc,CAACH,GAAD,CAAd;AACH,GAPL,EAOOI,KAPP,CAOaC,KAAK,IAAE;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,GATL;AAUH,CAdM;AAgBP,OAAO,MAAMI,eAAe,GAAG,MAAM;AACjCL,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAb,EAAAA,KAAK,CAACS,IAAN,CAAW,oCAAX,EAAgD;AAC5CH,IAAAA,KAAK,EAACD,QAAQ,CAACC,KAD6B;AAE5CC,IAAAA,QAAQ,EAACF,QAAQ,CAACE;AAF0B,GAAhD,EAIKG,IAJL,CAIUC,GAAG,IAAE;AACPG,IAAAA,cAAc,CAACH,GAAD,CAAd;AACH,GANL,EAOKI,KAPL,CAOWC,KAAK,IAAI;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,GATL;AAUH,CAZM;;AAcP,MAAMC,cAAc,GAAII,QAAD,IAAc;AACjCN,EAAAA,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACC,IAAT,CAAcC,WAA1B;AACA,QAAMA,WAAW,GAAIF,QAAQ,CAACC,IAAT,CAAcC,WAAnC,CAFiC,CAGjC;AACA;;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACApB,EAAAA,KAAK,CAACqB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASL,QAAQ,CAACC,IAAT,CAAcC,WAAY,EAArF,CANiC,CAOjC;;AACAI,EAAAA,UAAU,CAACP,eAAD,EAAkBb,eAAe,GAAG,KAApC,CAAV;AACAqB,EAAAA,cAAc,CAACC,OAAf,CAAuB,SAAvB,EAAiC,OAAjC;AACH,CAVD;;AAYA,OAAO,MAAMC,MAAM,GAAG,MAAK;AACvB3B,EAAAA,KAAK,CAACS,IAAN,CAAW,mCAAX,EACKC,IADL,CACUC,GAAG,IAAE;AACPN,IAAAA,QAAQ,CAACC,KAAT,GAAe,EAAf;AACAD,IAAAA,QAAQ,CAACE,QAAT,GAAkB,EAAlB;AACAkB,IAAAA,cAAc,CAACG,UAAf,CAA0B,SAA1B;AACA5B,IAAAA,KAAK,CAACqB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,IAAjD;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,GAPL,EAQKE,KARL,CAQWC,KAAK,IAAI;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,GAVL;AAWH,CAZM","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport App from '../../App'\nimport app from \"../../App\";\nconst JWT_EXPIRY_TIME = 24 * 3600 * 1000; // 만료 시간 (24시간 밀리 초로 표현)\n\nconst userData={\n    email:\"\",\n    password:\"\"\n}\n\nexport const onLogin = (email, password) => {\n    userData.email=email;\n    userData.password=password;\n\n    axios.post(\"http://localhost:8080/user/login\",{\n        email:email,\n        password:password\n    })\n        .then(res =>{\n            console.log(\"로그인 성공\")\n            onLoginSuccess(res)\n        }).catch(error=>{\n            console.log(\"로그인 실패\")\n        })\n}\n\nexport const onSilentRefresh = () => {\n    console.log(\"refresh\")\n    axios.post(\"http://localhost:8080/user/refresh\",{\n        email:userData.email,\n        password:userData.password\n    })\n        .then(res=>{\n            onLoginSuccess(res)\n        })\n        .catch(error => {\n            console.log(\"refresh실패\")\n        });\n}\n\nconst onLoginSuccess = (response) => {\n    console.log(response.data.accessToken)\n    const accessToken  = response.data.accessToken;\n    // accessToken 설정\n    // axios.interceptors 를 이용해도 됨\n    console.log(accessToken)\n    axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.accessToken}`;\n    // accessToken 만료하기 1분 전에 로그인 연장\n    setTimeout(onSilentRefresh, JWT_EXPIRY_TIME - 60000);\n    sessionStorage.setItem(\"isLogin\",\"login\")\n}\n\nexport const logout = () =>{\n    axios.post(\"http://localhost:8080/user/logout\",)\n        .then(res=>{\n            userData.email=\"\"\n            userData.password=\"\";\n            sessionStorage.removeItem(\"isLogin\")\n            axios.defaults.headers.common['Authorization'] = null;\n            console.log(\"로그아웃 성공\")\n        })\n        .catch(error => {\n            console.log(\"로그아웃 실패\")\n        });\n}\n"]},"metadata":{},"sourceType":"module"}