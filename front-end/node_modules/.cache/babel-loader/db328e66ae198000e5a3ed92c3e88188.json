{"ast":null,"code":"import axios from \"axios\";\nimport React, { useState } from \"react\";\nconst JWT_EXPIRY_TIME = 24 * 3600 * 1000; // 만료 시간 (24시간 밀리 초로 표현)\n\nconst userData = {\n  email: \"\",\n  password: \"\"\n};\nexport const onLogin = (email, password) => {\n  userData.email = email;\n  userData.password = password;\n  axios.post(\"http://localhost:8080/user/login\", {\n    email: email,\n    password: password\n  }).then(res => {\n    console.log(\"로그인 성공\");\n    onLoginSuccess(res);\n  }).catch(error => {\n    console.log(\"로그인 실패\");\n  }); // .then(()=>{\n  //     alert('로그인 되었습니다.')\n  //     window.location.href=\"/\"\n  // }).catch(error => {\n  //     // ... 에러 처리\n  // });\n};\nexport const onSilentRefresh = () => {\n  console.log(\"refresh\");\n  axios.post(\"http://localhost:8080/user/refresh\", {\n    email: userData.email,\n    password: userData.password\n  }).then(res => {\n    onLoginSuccess(res);\n  }).catch(error => {\n    console.log(\"refresh실패\");\n  });\n};\n\nconst onLoginSuccess = response => {\n  console.log('response: ' + response.data.accessToken);\n  const {\n    accessToken\n  } = response.data.accessToken; // accessToken 설정\n  // axios.interceptors 를 이용해도 됨\n\n  axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`; // accessToken 만료하기 1분 전에 로그인 연장\n\n  setTimeout(onSilentRefresh, JWT_EXPIRY_TIME - 60000);\n  window.location.href = \"/\";\n};\n\nexport const logout = () => {\n  axios.post(\"http://localhost:8080/user/logout\").then(res => {\n    userData.email = \"\";\n    userData.password = \"\";\n    axios.defaults.headers.common['Authorization'] = null;\n  }).catch(error => {// ... 로그아웃 실패 처리\n  });\n};","map":{"version":3,"sources":["/Users/kimheejun/WebstormProjects/boot_react/src/component/auth/LoginLogic.js"],"names":["axios","React","useState","JWT_EXPIRY_TIME","userData","email","password","onLogin","post","then","res","console","log","onLoginSuccess","catch","error","onSilentRefresh","response","data","accessToken","defaults","headers","common","setTimeout","window","location","href","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AAEA,MAAMC,eAAe,GAAG,KAAK,IAAL,GAAY,IAApC,C,CAA0C;;AAE1C,MAAMC,QAAQ,GAAC;AACXC,EAAAA,KAAK,EAAC,EADK;AAEXC,EAAAA,QAAQ,EAAC;AAFE,CAAf;AAKA,OAAO,MAAMC,OAAO,GAAG,CAACF,KAAD,EAAQC,QAAR,KAAqB;AACxCF,EAAAA,QAAQ,CAACC,KAAT,GAAeA,KAAf;AACAD,EAAAA,QAAQ,CAACE,QAAT,GAAkBA,QAAlB;AAEAN,EAAAA,KAAK,CAACQ,IAAN,CAAW,kCAAX,EAA8C;AAC1CH,IAAAA,KAAK,EAACA,KADoC;AAE1CC,IAAAA,QAAQ,EAACA;AAFiC,GAA9C,EAIKG,IAJL,CAIUC,GAAG,IAAG;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAC,IAAAA,cAAc,CAACH,GAAD,CAAd;AACH,GAPL,EAOOI,KAPP,CAOaC,KAAK,IAAE;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,GATL,EAJwC,CAcpC;AACA;AACA;AACA;AACA;AACA;AACP,CApBM;AAsBP,OAAO,MAAMI,eAAe,GAAG,MAAM;AACjCL,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAZ,EAAAA,KAAK,CAACQ,IAAN,CAAW,oCAAX,EAAgD;AAC5CH,IAAAA,KAAK,EAACD,QAAQ,CAACC,KAD6B;AAE5CC,IAAAA,QAAQ,EAACF,QAAQ,CAACE;AAF0B,GAAhD,EAIKG,IAJL,CAIUC,GAAG,IAAE;AACPG,IAAAA,cAAc,CAACH,GAAD,CAAd;AACH,GANL,EAOKI,KAPL,CAOWC,KAAK,IAAI;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,GATL;AAUH,CAZM;;AAcP,MAAMC,cAAc,GAAII,QAAD,IAAc;AACjCN,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAaK,QAAQ,CAACC,IAAT,CAAcC,WAAvC;AACA,QAAM;AAAEA,IAAAA;AAAF,MAAkBF,QAAQ,CAACC,IAAT,CAAcC,WAAtC,CAFiC,CAGjC;AACA;;AACAnB,EAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASH,WAAY,EAAvE,CALiC,CAMjC;;AACAI,EAAAA,UAAU,CAACP,eAAD,EAAkBb,eAAe,GAAG,KAApC,CAAV;AACAqB,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAqB,GAArB;AACH,CATD;;AAWA,OAAO,MAAMC,MAAM,GAAG,MAAK;AACvB3B,EAAAA,KAAK,CAACQ,IAAN,CAAW,mCAAX,EACKC,IADL,CACUC,GAAG,IAAE;AACPN,IAAAA,QAAQ,CAACC,KAAT,GAAe,EAAf;AACAD,IAAAA,QAAQ,CAACE,QAAT,GAAkB,EAAlB;AACAN,IAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,IAAjD;AACH,GALL,EAMKR,KANL,CAMWC,KAAK,IAAI,CACZ;AACH,GARL;AASH,CAVM","sourcesContent":["import axios from \"axios\";\nimport React,{useState} from \"react\";\n\nconst JWT_EXPIRY_TIME = 24 * 3600 * 1000; // 만료 시간 (24시간 밀리 초로 표현)\n\nconst userData={\n    email:\"\",\n    password:\"\"\n}\n\nexport const onLogin = (email, password) => {\n    userData.email=email;\n    userData.password=password;\n\n    axios.post(\"http://localhost:8080/user/login\",{\n        email:email,\n        password:password\n    })\n        .then(res =>{\n            console.log(\"로그인 성공\")\n            onLoginSuccess(res)\n        }).catch(error=>{\n            console.log(\"로그인 실패\")\n        })\n        // .then(()=>{\n        //     alert('로그인 되었습니다.')\n        //     window.location.href=\"/\"\n        // }).catch(error => {\n        //     // ... 에러 처리\n        // });\n}\n\nexport const onSilentRefresh = () => {\n    console.log(\"refresh\")\n    axios.post(\"http://localhost:8080/user/refresh\",{\n        email:userData.email,\n        password:userData.password\n    })\n        .then(res=>{\n            onLoginSuccess(res)\n        })\n        .catch(error => {\n            console.log(\"refresh실패\")\n        });\n}\n\nconst onLoginSuccess = (response) => {\n    console.log('response: '+response.data.accessToken)\n    const { accessToken } = response.data.accessToken;\n    // accessToken 설정\n    // axios.interceptors 를 이용해도 됨\n    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n    // accessToken 만료하기 1분 전에 로그인 연장\n    setTimeout(onSilentRefresh, JWT_EXPIRY_TIME - 60000);\n    window.location.href=\"/\"\n}\n\nexport const logout = () =>{\n    axios.post(\"http://localhost:8080/user/logout\",)\n        .then(res=>{\n            userData.email=\"\"\n            userData.password=\"\";\n            axios.defaults.headers.common['Authorization'] = null;\n        })\n        .catch(error => {\n            // ... 로그아웃 실패 처리\n        });\n}\n"]},"metadata":{},"sourceType":"module"}